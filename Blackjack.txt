# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.lis = []

    
    def __str__(self):
        str_cards = "Hand contains"
        for i in self.lis:
            str_cards+=" "+ str(i)
        return str_cards
        # return a string representation of a hand

    def add_card(self, card):
        self.lis.append(Card(card.get_suit(), card.get_rank()))	

    def get_value(self):
        ranks_in_lis=[]
        for i in self.lis:
                ranks_in_lis.append(i.get_rank())
        sum = 0  
        for rank in ranks_in_lis:
               sum += VALUES[rank]
                    
        if "A" in ranks_in_lis and not sum + 10 > 21:
                sum += 10
        return sum                
                    

    def draw(self, canvas, pos):
        i = 0
        for crd in self.lis:
            
            crd.draw(canvas, [pos[0]+i,pos[1]] )           
            i += 50
            
        
        
        
        
 
 
        
# define deck class 
                
class Deck:
               
    def __init__(self):
        dek = []
        for s in SUITS:
            for r in RANKS:
                dek.append(Card(s,r) ) 
        self.deck = dek                          

    def shuffle(self):
        # shuffle the deck 
        random.shuffle(self.deck)  # use random.shuffle()

    def deal_card(self):
        return self.deck.pop()
        # deal a card object from the deck
    
    def __str__(self):
        str_cards = "Deck contains "
        for i in self.deck:
            str_cards+=" "+ str(i)
        return str_cards
        # return a string representing the deck

# return a string representing the deck

#define event handlers for buttons
def deal():
    
    

    global outcome, in_play, dealer_hand, player_hand, new_deck
    in_play = True
    
    dealer_hand = Hand()
    player_hand = Hand()
    new_deck = Deck()
    new_deck.shuffle()
    player_hand.add_card(new_deck.deal_card())
    dealer_hand.add_card((new_deck.deal_card()))
    if in_play:
        outcome = "Hit or stand?"
    if not in_play:    
        outcome = "Deal?"
        
    
    #outcome = "player " + str(player_hand)
    
                         

   
    
    

def hit():
    global in_play, outcome, score
    if in_play and player_hand.get_value() <= 21:
        player_hand.add_card(new_deck.deal_card())
        if player_hand.get_value() > 21:
            outcome =  "You have Busted"
            in_play = False
            score -= 1
            
        
    
    # if the hand is in play, hit the player
   
    # if busted, assign a message to outcome, update in_play and score
       
def stand():
    
    global in_play, dealer_hand, player_hand, score, outcome
    
    if in_play:
        if player_hand.get_value() > 21:
            outcome = "You have busted"
            score -= 1 
            in_play = False
        else:
            while dealer_hand.get_value() <=  17:
                dealer_hand.add_card(new_deck.deal_card())
            if dealer_hand.get_value() >  21:
                    score += 1
                    outcome  = "Dealer Busted. Deal Again?"
                    in_play = False             
            elif player_hand.get_value() > dealer_hand.get_value():
                    outcome = "You win"
                    score += 1
                    in_play = False
            else:
                    outcome = "You lose. Deal Again?"
                    score -= 1
                    in_play = False
        
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more

    # assign a message to outcome, update in_play and score

# draw handler    
def draw(canvas):
    global outcome, score, in_play
    # test to make sure that card.draw works, replace with your code below
    
    
        
        
    dealer_hand.draw(canvas, [100, 200])
    if in_play:
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, [136, 248], CARD_BACK_SIZE)
    player_hand.draw(canvas, [100, 400])
    canvas.draw_text(outcome, [300, 350], 20, 'pink')
    canvas.draw_text("score: "+str(score), [400, 50], 20, 'red')
    canvas.draw_text("Blackjack", [30, 100], 40, 'yellow')
    canvas.draw_text("Dealer", [30, 170], 20, 'orange')
    canvas.draw_text("Player", [30, 400], 20, 'orange')
    


# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


# remember to review the gradic rubric
